[Logging]
level = DEBUG

[Spark]
session_name = EventQualityWarnings

# the name section should be identical to COMPONENT_ID of EventQualityWarnings Component
# the value of SUB_COMPONENT_ID key shoudl be identical to the name of the following section
[EventQualityWarnings]
SUB_COMPONENT_ID = EventCleaningQualityWarnings

[EventCleaningQualityWarnings]
# keys in Paths.Silver section in general config
input_qm_by_column_path_key = event_syntactic_quality_metrics_by_column
input_qm_freq_distr_path_key = event_syntactic_quality_metrics_frequency_distribution
output_qw_log_table_path_key = event_syntactic_quality_warnings_log_table
output_qw_for_plots_path_key = event_syntactic_quality_warnings_for_plots
# BY NOW make sure that the first day(s) of research period has enough previous data
# of df_qa_by_column and df_qa_freq_distribution 
# (e.g. staring from 2023-01-01, if period is a week and start period is 2023-01-08)
data_period_start = 2023-01-01
# you can exceed max(df_qa_by_column.date) 
# although you will still get QWs for dates till max(df_qa_by_column.date), including
data_period_end = 2023-01-09
# should be either week or month
lookback_period = week
# SIZE QA
do_size_raw_data_qw = True
do_size_clean_data_qw = True
data_size_tresholds = {
    "SIZE_RAW_DATA_BYDATE_VARIABILITY": 3,
    "SIZE_RAW_DATA_BYDATE_ABS_VALUE_UPPER_LIMIT": 10000000,
    "SIZE_RAW_DATA_BYDATE_ABS_VALUE_LOWER_LIMIT": 0,
    "SIZE_CLEAN_DATA_BYDATE_VARIABILITY": 3,
    "SIZE_CLEAN_DATA_BYDATE_ABS_VALUE_UPPER_LIMIT": 10000000,
    "SIZE_CLEAN_DATA_BYDATE_ABS_VALUE_LOWER_LIMIT": 0,
    }
# ERROR RATE QW
do_error_rate_by_date_qw = True
do_error_rate_by_date_and_cell_qw = False
do_error_rate_by_date_and_user_qw = True
do_error_rate_by_date_and_cell_user_qw = True
error_rate_tresholds = {
    "TOTAL_ERROR_RATE_BYDATE_OVER_AVERAGE": 30,
    "TOTAL_ERROR_RATE_BYDATE_VARIABILITY": 2,
    "TOTAL_ERROR_RATE_BYDATE_ABS_VALUE_UPPER_LIMIT": 20,
    "ERROR_RATE_BYDATE_BYCELL_OVER_AVERAGE": 30,
    "ERROR_RATE_BYDATE_BYCELL_VARIABILITY": 2,
    "ERROR_RATE_BYDATE_BYCELL_ABS_VALUE_UPPER_LIMIT": 20,
    "ERROR_RATE_BYDATE_BYUSER_OVER_AVERAGE": 30,
    "ERROR_RATE_BYDATE_BYUSER_VARIABILITY": 2,
    "ERROR_RATE_BYDATE_BYUSER_ABS_VALUE_UPPER_LIMIT": 20,
    "ERROR_RATE_BYDATE_BYCELL_USER_OVER_AVERAGE": 30,
    "ERROR_RATE_BYDATE_BYCELL_USER_VARIABILITY": 2,
    "ERROR_RATE_BYDATE_BYCELL_USER_ABS_VALUE_UPPER_LIMIT": 20,
    }
# ERROR TYPE QW
# for each type of error (key), specified the colums you want to check, naming of columns must be oidentical to ColNames
# if you do not want to run qw on some error_type leave the list empty
# None - for no_location and out_of_bounding_box because they do not have more than one column used for this error_type
# for more clarity please check event_cleaning.py
error_type_qw_checks = {
    'missing_value': ['user_id', 'mcc', 'timestamp'],
    'out_of_admissible_values': ['cell_id', 'mcc', 'timestamp'],
    'not_right_syntactic_format': ['timestamp'], 
    'no_location':[None], 
    'out_of_bounding_box':[None]
    }
# for each dict_error_type_thresholds make sure you specified all relevant columns
# the order of thresholds is important, should be: AVERAGE, VARIABILITY, and ABS_VALUE_UPPER_LIMIT
missing_value_thresholds = {
    'user_id': {"Missing_value_RATE_BYDATE_USER_AVERAGE": 30,
                "Missing_value_RATE_BYDATE_USER_VARIABILITY": 2,
                "Missing_value_RATE_BYDATE_USER_ABS_VALUE_UPPER_LIMIT": 20
               }, 
    'mcc': {"Missing_value_RATE_BYDATE_MCC_AVERAGE": 30,
            "Missing_value_RATE_BYDATE_MCC_VARIABILITY": 2,
            "Missing_value_RATE_BYDATE_MCC_ABS_VALUE_UPPER_LIMIT": 20
           }, 
    'timestamp': {"Missing_value_RATE_BYDATE_TIMESTAMP_AVERAGE": 30,
                  "Missing_value_RATE_BYDATE_TIMESTAMP_VARIABILITY": 2,
                  "Missing_value_RATE_BYDATE_TIMESTAMP_ABS_VALUE_UPPER_LIMIT": 20
                 }
    }
out_of_admissible_values_thresholds = {
    'cell_id': {"Out_of_range_RATE_BYDATE_CELL_AVERAGE": 30,
                "Out_of_range_RATE_BYDATE_CELL_VARIABILITY": 2,
                "Out_of_range_RATE_BYDATE_CELL_ABS_VALUE_UPPER_LIMIT": 20
               }, 
    'mcc': {"Out_of_range_RATE_BYDATE_MCC_AVERAGE": 30,
            "Out_of_range_RATE_BYDATE_MCC_VARIABILITY": 2,
            "Out_of_range_RATE_BYDATE_MCC_ABS_VALUE_UPPER_LIMIT": 20
           }, 
    'timestamp': {"Out_of_range_RATE_BYDATE_TIMESTAMP_AVERAGE": 30,
                  "Out_of_range_RATE_BYDATE_TIMESTAMP_VARIABILITY": 2,
                  "Out_of_range_RATE_BYDATE_TIMESTAMP_ABS_VALUE_UPPER_LIMIT": 20
                 }
    }
not_right_syntactic_format_thresholds = {
    'timestamp': {"Wrong_type_RATE_BYDATE_TIMESTAMP_AVERAGE": 30,
                  "Wrong_type_RATE_BYDATE_TIMESTAMP_VARIABILITY": 2,
                  "Wrong_type_RATE_BYDATE_TIMESTAMP_ABS_VALUE_UPPER_LIMIT": 20
                 }
    }
no_location_thresholds = {
    None: {"No_location_RATE_BYDATE_AVERAGE": 30,
           "No_location_RATE_BYDATE_VARIABILITY": 2,
           "No_location_RATE_BYDATE_ABS_VALUE_UPPER_LIMIT": 20
          }
    }
out_of_bounding_box_thresholds = {
    None: {"Out_of_bbox_RATE_BYDATE_AVERAGE": 30,
           "Out_of_bbox_RATE_BYDATE_VARIABILITY": 2,
           "Out_of_bbox_RATE_BYDATE_ABS_VALUE_UPPER_LIMIT": 20
          }
    }
clear_destination_directory = True