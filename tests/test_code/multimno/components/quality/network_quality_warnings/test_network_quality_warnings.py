from pyspark.testing.utils import assertDataFrameEqual

from multimno.core.configuration import parse_configuration
from multimno.core.data_objects.silver.silver_network_syntactic_quality_warnings_log_table import (
    SilverNetworkDataSyntacticQualityWarningsLogTable,
)
from multimno.core.constants.columns import ColNames
from multimno.components.quality.network_quality_warnings.network_quality_warnings import NetworkQualityWarnings

from tests.test_code.fixtures import spark_session as spark
from tests.test_code.test_common import TEST_RESOURCES_PATH, TEST_GENERAL_CONFIG_PATH
from tests.test_code.test_utils import setup_test_data_dir, teardown_test_data_dir
from tests.test_code.multimno.components.quality.network_quality_warnings.aux_network_quality_warnings import (
    set_input_metrics_data,
    expected_log_table,
)

# Dummy to avoid linting errors using pytest
fixtures = [spark, expected_log_table]


def setup_function():
    setup_test_data_dir()


def teardown_function():
    teardown_test_data_dir()


def test_network_quality_warnings(spark, expected_log_table):
    """
    DESCRIPTION:
        Test shall execute the NetworkQualityWarning component with a minimal metrics dataframe (1 week + 1 day).
        Six warnings should be raised: two regarding rows before and after cleaning being below the average, and four
        regarding the out of range and null errors of the `frequency` field regarding the absolute average and the UCL.

    INPUT:
        Test Configs:
            general: tests/test_resources/config/general_config.ini
            component: tests/test_resources/config/network_quality_warnings/testing_network_quality_warnings.ini
        Input Data:
            network_syntactic_metrics: /opt/testing_data/..., generated by aux_network_quality_warnings.set_input_metrics_data

    EXPECTED OUTPUT:
        network_quality_warnings_log_table: (fixture) aux_network_quality_warnings.expected_log_table

    STEPS:
        1.- Init the NetworkQualityWarnings component with test configs.
        2.- Write input data in /opt/testing_data
        3.- Read expected data with SilverNetworkDataSyntacticQualityWarningsLogTable class (fixture)
        4.- Execute the NetworkQualityWarnings component.
        5.- Read written data in /opt/testing_data with SilverNetworkDataSyntacticQualityWarningsLogTable class.
        6.- Assert DataFrames are equal.
    """
    # Setup
    # Init configs & paths
    component_config_path = (
        f"{TEST_RESOURCES_PATH}/config/network_quality_warnings/testing_network_quality_warnings.ini"
    )
    config = parse_configuration(TEST_GENERAL_CONFIG_PATH, component_config_path)

    # Init component class
    networkQW = NetworkQualityWarnings(TEST_GENERAL_CONFIG_PATH, component_config_path)

    # Create Input data
    set_input_metrics_data(spark, config)

    # Expected (defined as fixture)

    # Execution
    networkQW.execute()

    # Assertion
    # read from test data output
    output_data_object = networkQW.output_data_objects[SilverNetworkDataSyntacticQualityWarningsLogTable.ID]
    output_data_object.read()

    # # assert read data == expected
    # timestamp column is execution-specific, we can ignore it here
    assertDataFrameEqual(expected_log_table.drop(ColNames.timestamp), output_data_object.df.drop(ColNames.timestamp))
