from pyspark.testing.utils import assertDataFrameEqual

from multimno.core.configuration import parse_configuration
from multimno.core.constants.columns import ColNames
from multimno.components.quality.semantic_quality_warnings.semantic_quality_warnings import SemanticQualityWarnings
from multimno.core.data_objects.silver.silver_semantic_quality_warnings_log_table import (
    SilverEventSemanticQualityWarningsLogTable,
)

from tests.test_code.fixtures import spark_session as spark
from tests.test_code.multimno.components.quality.semantic_quality_warnings.aux_test_semantic_quality_warnings import (
    set_input_data,
    expected_warnings,
)
from tests.test_code.test_common import TEST_RESOURCES_PATH, TEST_GENERAL_CONFIG_PATH
from tests.test_code.test_utils import setup_test_data_dir, teardown_test_data_dir


fixtures = [spark, expected_warnings]


def setup_function():
    setup_test_data_dir()


def teardown_function():
    teardown_test_data_dir()


def test_semantic_quality_warnings(spark, expected_warnings):
    """
    DESCRIPTION:
        Test shall execute the SemanticQualityWarnings component with metrics for 5 days and a 4-day lookback
        period for all warnings. Errors 2, 3, and 4 will raise a warning, 1 will not.

    INPUT:
        Test Configs:
            general: tests/test_resources/config/general_config.ini
            component: tests/test_resources/config/semantic_quality_warnings/testing_semantic_quality_warnings.ini
        Input Data:
            event_device_semantic_quality_metrics: /opt/testing_data/..., generated by aux_test_semantic_quality_warnings.set_input_data

    EXPECTED OUTPUT:
        event_device_semantic_quality_warnings_log_table: (fixture) aux_test_semantic_quality_warnings.expected_warnings

    STEPS:
        1.- Init the SemanticQualityWarnings component with test configs.
        2.- Write input data in /opt/testing_data
        3.- Read expected data with SilverEventSemanticQualityWarningsLogTable class (fixture)
        4.- Execute the SemanticQualityWarnings component.
        5.- Read written data in /opt/testing_data with SilverEventSemanticQualityWarningsLogTable class.
        6.- Assert that the warning DataFrames are equal.
    """
    # Setup

    # init configs and paths
    component_config_path = (
        f"{TEST_RESOURCES_PATH}/config/semantic_quality_warnings/testing_semantic_quality_warnings.ini"
    )
    config = parse_configuration(TEST_GENERAL_CONFIG_PATH, component_config_path)

    # init component class
    semantic_warnings = SemanticQualityWarnings(TEST_GENERAL_CONFIG_PATH, component_config_path)

    # create input data
    set_input_data(spark, config)

    # Expected (defined as fixture)

    # Execution
    semantic_warnings.execute()

    # Assertion
    output_warnings_log_table = semantic_warnings.output_data_objects[SilverEventSemanticQualityWarningsLogTable.ID]
    output_warnings_log_table.read()

    assertDataFrameEqual(
        actual=output_warnings_log_table.df.drop("execution_id"), expected=expected_warnings.drop("execution_id")
    )
