from pyspark.testing.utils import assertDataFrameEqual

from multimno.core.configuration import parse_configuration
from multimno.core.data_objects.bronze.bronze_event_data_object import (
    BronzeEventDataObject,
)
from multimno.core.constants.columns import ColNames
from multimno.components.ingestion.synthetic.synthetic_events import SyntheticEvents

from tests.test_code.fixtures import spark_session as spark
from tests.test_code.multimno.components.ingestion.synthetic.synthetic_events.aux_synthetic_events import (
    expected_events,
    set_input_data,
)

from tests.test_code.test_common import TEST_RESOURCES_PATH, TEST_GENERAL_CONFIG_PATH
from tests.test_code.test_utils import setup_test_data_dir, teardown_test_data_dir


fixtures = [spark, expected_events]


def setup_function():
    setup_test_data_dir()


def teardown_function():
    teardown_test_data_dir()


def test_synthetic_events(spark, expected_events):
    """
    DESCRIPTION:
        Test shall execute the SyntheticEvents component with zero errors, for a network of 3 cells,
        and for a synthetic diary of stay-move-stay for a single user.

    INPUT:
        Test Configs:
            general: tests/test_resources/config/general_config.ini
            component: tests/test_resources/config/synthetic/testing_synthetic_events.ini
        Input Data:
            diaries_data_bronze: /opt/testing_data/..., generated by aux_synthetic_events.set_input_data
            network_data_bronze: /opt/testing_data/..., generated by aux_synthetic_events.set_input_data

    EXPECTED OUTPUT:
        bronze_event_data: (fixture) aux_event_semantic_cleaning.expected_events

    STEPS:
        1.- Init the Syntheticevents component with test configs.
        2.- Write input data in /opt/testing_data
        3.- Read input data with BronzeNetworkDataObject class (fixture)
        4.- Read input data with BronzeSyntheticDiariesDataObject class (fixture)
        5.- Read expected data with BronzeEventDataObject class
        6.- Execute the SyntheticEvents component.
        7.- Read written data in /opt/testing_data with BronzeEventDataObject classes.
        8.- Assert event DataFrames are equal.
    """
    # Setup

    # init configs and paths

    component_config_path = f"{TEST_RESOURCES_PATH}/config/synthetic/testing_synthetic_events.ini"
    config = parse_configuration(TEST_GENERAL_CONFIG_PATH, component_config_path)

    # init component class
    synthetic_events = SyntheticEvents(TEST_GENERAL_CONFIG_PATH, component_config_path)

    # create input data
    set_input_data(spark, config)

    # Execution
    synthetic_events.execute()

    # Assertion
    # read from test data output

    output_events_data_object = synthetic_events.output_data_objects[BronzeEventDataObject.ID]
    output_events_data_object.read()

    assertDataFrameEqual(output_events_data_object.df, expected_events)
