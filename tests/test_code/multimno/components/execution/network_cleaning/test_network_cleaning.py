from pyspark.testing.utils import assertDataFrameEqual

from multimno.core.configuration import parse_configuration
from multimno.core.data_objects.silver.silver_network_data_object import SilverNetworkDataObject
from multimno.components.execution.network_cleaning.network_cleaning import NetworkCleaning

from tests.test_code.fixtures import spark_session as spark
from tests.test_code.multimno.components.execution.network_cleaning.aux_network_testing import expected_net
from tests.test_code.multimno.components.execution.network_cleaning.aux_network_testing import set_input_network_data
from tests.test_code.test_common import TEST_RESOURCES_PATH, TEST_GENERAL_CONFIG_PATH
from tests.test_code.test_utils import setup_test_data_dir, teardown_test_data_dir


# Dummy to avoid linting errors using pytest
fixtures = [spark, expected_net]


def setup_function():
    setup_test_data_dir()


def teardown_function():
    teardown_test_data_dir()


def test_network_cleaning(spark, expected_net):
    """
    DESCRIPTION:
        Test shall execute the NetworkCleaning component with a dataframe of two rows. The first row shall be correct
            and the second shall have the cell_id set to NULL so it should be filtered.

    INPUT:
        Test Configs:
            general: tests/test_resources/config/general_config.ini
            component: tests/test_resources/config/network_cleaning/testing_network_cleaning.ini
        Input Data:
            bronze_network: /opt/testing_data/..., generated by aux_network_testing.set_input_network_data

    EXPECTED OUTPUT:
        silver_network: (fixture) aux_network_testing.expected_net

    STEPS:
        1.- Init the NetworkCleaning component with test configs.
        2.- Write input data in /opt/testing_data
        3.- Read expected data with SilverNetworkDataObject class (fixture)
        4.- Execute the NetworkCleaning component.
        5.- Read written data in /opt/testing_data with SilverNetworkDataObject class.
        6.- Assert DataFrames are equal.
    """
    # Setup

    ## Init configs & paths
    component_config_path = f"{TEST_RESOURCES_PATH}/config/network_cleaning/testing_network_cleaning.ini"
    config = parse_configuration(TEST_GENERAL_CONFIG_PATH, component_config_path)

    ## Init component class
    network_cleaning = NetworkCleaning(TEST_GENERAL_CONFIG_PATH, component_config_path)

    ## Create Input data
    set_input_network_data(spark, config)

    # Expected (defined as fixture)

    # Execution
    network_cleaning.execute()

    # Assertion
    # read from test data output
    output_data_object = network_cleaning.output_data_objects[SilverNetworkDataObject.ID]
    output_data_object.read()
    # assert read data == expected
    assertDataFrameEqual(expected_net, output_data_object.df)
